# Backstage override configuration for your local development environment
app:
  title: Scaffolded Backstage App
  baseUrl: http://localhost:3000

organization:
  name: My Company

backend:
  # Used for enabling authentication, secret is shared by all backend plugins
  # See https://backstage.io/docs/auth/service-to-service-auth for
  # information on the format
  auth:
    dangerouslyDisableDefaultAuthPolicy: true
  #   keys:
  #     - secret: ${BACKEND_SECRET}
  baseUrl: http://localhost:7007
  listen:
    port: 7007
    # Uncomment the following host directive to bind to specific interfaces
    # host: 127.0.0.1
  csp:
    connect-src: [ "'self'", 'http:', 'https:' ]
    # Content-Security-Policy directives follow the Helmet format: https://helmetjs.github.io/#reference
    # Default Helmet Content-Security-Policy values can be removed by setting the key to false
  cors:
    origin: http://localhost:3000
    methods: [ GET, HEAD, PATCH, POST, PUT, DELETE ]
    credentials: true
  # This is for local development only, it is not recommended to use this in production
  # The production database configuration is stored in app-config.production.yaml
  database:
    client: better-sqlite3
    connection: ':memory:'
  # workingDirectory: /tmp # Use this to configure a working directory for the scaffolder, defaults to the OS temp-dir

integrations:
  github:
  - host: github.com
    # This is a Personal Access Token or PAT from GitHub. You can find out how to generate this token, and more information
    # about setting up the GitHub integration here: https://backstage.io/docs/integrations/github/locations#configuration
    token: ${GITHUB_TOKEN}
  ### Example for how to add your GitHub Enterprise instance using the API:
  # - host: ghe.example.net
  #   apiBaseUrl: https://ghe.example.net/api/v3
  #   token: ${GHE_TOKEN}

  # proxy:
  ### Example for how to add a proxy endpoint for the frontend.
  ### A typical reason to do this is to handle HTTPS and CORS for internal services.
  # endpoints:
  #   '/test':
  #     target: 'https://example.com'
  #     changeOrigin: true

  # Reference documentation http://backstage.io/docs/features/techdocs/configuration
  # Note: After experimenting with basic setup, use CI/CD to generate docs
  # and an external cloud storage when deploying TechDocs for production use-case.
  # https://backstage.io/docs/features/techdocs/how-to-guides#how-to-migrate-from-techdocs-basic-to-recommended-deployment-approach
techdocs:
  builder: 'local' # Alternatives - 'external'
  generator:
    runIn: 'docker' # Alternatives - 'local'
  publisher:
    type: 'local' # Alternatives - 'googleGcs' or 'awsS3'. Read documentation for using alternatives.

auth:
  environment: development
  providers:
    github:
      development:
        clientId: 'Ov23lixOChTPPiGctngN'
        clientSecret: '92a40028733d4566fc8508d13fcf2cce63e68a52'
        dangerouslyAllowOutsideDevelopment: true
        signIn:
          resolvers:
          - resolver: usernameMatchingUserEntityName
          options:
            defaultNamespace: default

catalog:
  import:
    entityFilename: catalog-info.yaml
    pullRequestBranchName: backstage-integration
  rules:
  - allow: [ Component, System, API, Resource, Location ]
  locations:
  - type: file
    target: ../catalog-model/examples/entities.yaml

  - type: file
    target: ../catalog-model/examples/template/template.yaml
    rules:
    - allow: [ Template ]

  - type: file
    target: ../catalog-model/examples/org.yaml
    rules:
    - allow: [ User, Group ]

permission:
  enabled: true

kubernetes:
  frontend:
    podDelete:
      enabled: true
  serviceLocatorMethod:
    type: 'multiTenant'
  clusterLocatorMethods:
  - type: 'config'
    clusters:
    - url: https://127.0.0.1:63536
      name: kind-dev-cluster
      skipTLSVerify: false
      authProvider: serviceAccount
      serviceAccountToken: 'eyJhbGciOiJSUzI1NiIsImtpZCI6IjkyTFNWbmJ3TjhkM3phZUZINkJlU3Y3cVJoVGJPRUx4dlZ1NEpfZkZvdVEifQ.eyJhdWQiOlsiaHR0cHM6Ly9rdWJlcm5ldGVzLmRlZmF1bHQuc3ZjLmNsdXN0ZXIubG9jYWwiXSwiZXhwIjoxNzYxODA4ODk4LCJpYXQiOjE3NjE4MDUyOTgsImlzcyI6Imh0dHBzOi8va3ViZXJuZXRlcy5kZWZhdWx0LnN2Yy5jbHVzdGVyLmxvY2FsIiwianRpIjoiOGZkN2Q1NmItNGZhZC00ZGNmLTllNjQtNmYzZWU5MGQ4M2JjIiwia3ViZXJuZXRlcy5pbyI6eyJuYW1lc3BhY2UiOiJkZWZhdWx0Iiwic2VydmljZWFjY291bnQiOnsibmFtZSI6ImJhY2tzdGFnZSIsInVpZCI6ImJiZjQ4MWNhLTQzMjMtNDQ0OC1iMTQxLTM4MDQyOGY3YmU1MCJ9fSwibmJmIjoxNzYxODA1Mjk4LCJzdWIiOiJzeXN0ZW06c2VydmljZWFjY291bnQ6ZGVmYXVsdDpiYWNrc3RhZ2UifQ.R7KYDRjMAje2rHrIxk-Q7SQaUvxOEjp8DQymC9uN5ci5o-H1DO9AAQbhKjdJtXLSY9FgPMkQMyDGA-s_bh_rVeACmGI2FnIcwYm-lgl7YybfNYlQX0GT3ybTVkQllmN5tAXENEaQVc7FAg4JOhYC_SrBrgoq-zbI2UBk2YvmyWZjGrO_wvQivXTxZNwFlGWptBRV3kHV_b5B60wtIPN2SuJfyuqIkjC-OxPRDMzt5wR5tyZvHX9AHgWzj_MhaJFkXoP7T32viLhdyiyi0teddfU3IT8qp4mMk8ZMIOf_mNDJbn0DgRyNsXN7qUW_7qY6nvfofHO2TNb4BBxc9z7WZA'
